import unittestimport sqlite3import osimport randomimport stringDB_PATH = "booking.db"def reset_db():    if os.path.exists(DB_PATH):        os.remove(DB_PATH)    conn = sqlite3.connect(DB_PATH)    cursor = conn.cursor()    cursor.execute("""        CREATE TABLE bookings (            reference TEXT PRIMARY KEY,            first_name TEXT,            last_name TEXT,            passport TEXT,            seat_id TEXT        )    """)    conn.commit()    conn.close()seat_matrix = [    ['F', 'F', 'X', 'F', 'F'],    ['F', 'S', 'X', 'S', 'F'],    ['F', 'F', 'X', 'F', 'F'],]def is_valid_seat(seat_id):    if len(seat_id) < 2 or not seat_id[0].isalpha() or not seat_id[1:].isdigit():        return False    row = ord(seat_id[0]) - ord('A')    col = int(seat_id[1:]) - 1    return 0 <= row < len(seat_matrix) and 0 <= col < len(seat_matrix[0])def book_seat(first, last, passport, seat_id):    if not is_valid_seat(seat_id):        return "Invalid seat"    row = ord(seat_id[0]) - ord('A')    col = int(seat_id[1:]) - 1    if seat_matrix[row][col] != 'F':        return "Seat not available"        conn = sqlite3.connect(DB_PATH)    cursor = conn.cursor()    ref = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))    cursor.execute("INSERT INTO bookings VALUES (?, ?, ?, ?, ?)",                   (ref, first, last, passport, seat_id))    conn.commit()    conn.close()    seat_matrix[row][col] = 'R'    return refdef cancel_seat(seat_id):    if not is_valid_seat(seat_id):        return "Invalid seat"    row = ord(seat_id[0]) - ord('A')    col = int(seat_id[1:]) - 1    if seat_matrix[row][col] != 'R':        return "Seat not reserved"        conn = sqlite3.connect(DB_PATH)    cursor = conn.cursor()    cursor.execute("DELETE FROM bookings WHERE seat_id = ?", (seat_id,))    conn.commit()    conn.close()    seat_matrix[row][col] = 'F'    return "Seat freed"class TestBookingSystem(unittest.TestCase):    def setUp(self):        reset_db()        for r in range(len(seat_matrix)):            for c in range(len(seat_matrix[r])):                if seat_matrix[r][c] == 'R':                    seat_matrix[r][c] = 'F'    def test_valid_booking(self):        result = book_seat("Alice", "Wong", "AA1234567", "A1")        self.assertEqual(len(result), 8)  # Booking ref length check    def test_double_booking(self):        book_seat("Bob", "Smith", "BB7654321", "A1")        result = book_seat("Eve", "White", "CC888888", "A1")        self.assertIn(result, ["Seat not available", "Invalid seat"])    def test_invalid_seat_booking(self):        result = book_seat("Ron", "Lee", "DD9988776", "Z9")        self.assertEqual(result, "Invalid seat")    def test_cancel_booked_seat(self):        book_seat("Jane", "Brown", "EE5544332", "B1")        result = cancel_seat("B1")        self.assertEqual(result, "Seat freed")    def test_cancel_unbooked_seat(self):        result = cancel_seat("C1")        self.assertEqual(result, "Seat not reserved")    def test_cancel_invalid_seat(self):        result = cancel_seat("Z9")        self.assertEqual(result, "Invalid seat")if __name__ == "__main__":    unittest.main()